package cn.com.zhang.Class05BuilderModel;

/**
 * @author ZhangJunqi
 * @Date 2021/12/4 -16:18
 */
public class Test {
    public static void main(String[] args) {
        ComputerBuilder builder=new ComputerBuilder ();
        Director director=new Director ();
        director.constructComputer (builder);
        Computer computer=builder.setComputer ();
        System.out.println(computer.toString ());
        /*
        假设你需要去兰大电脑城去组装一台电脑主机，可是你完全不知道一台主机需要哪些东西，你会怎么 做？
        一个完整的电脑主机组合较为复杂，可以分以下几个步骤来完成：
        步骤 1：你和老板协商，老板根据你的用途给你推荐组件并列出清单
        步骤 2：老板根据清单准备货组件
        步骤 3：老板指挥组装人员进行电脑组装
        步骤 4：你得到完整的电脑 整个过程虽然比较复杂，但对你来说，没有必要清楚每个详细的组装过程，你在乎的只是电脑主机这个成品。
        这是建造者模式需要解决的问题，即在用户不知道对象的建造过程和细节的情况下就可以 直接创建复杂的对象。

        建造者模式涉及的四个对象：抽象建造者、具体建造者、指挥者、具体产品。
        易于解耦 将产品本身与产品创建过程进行解耦，可以使用相同的创建过程来得到不同的产品。也就说细节 依赖抽象。
        易于精确控制对象的创建 将复杂产品的创建步骤分解在不同的方法中，
        使得创建过程更加清晰易于拓展增加新的具体建造者无需修改原有类库的代码，易于拓展，符合“开闭原则“。
        每一个具体建 造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者 或增加新的具体建造者，
        用户使用不同的具体建造者即可得到不同的产品对象。 建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；
        如果产品之间的差异性很大，则 不适合使用建造者模式，因此其使用范围受到一定的限制。
        如果产品的内部变化复杂，可能会导致 需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。
         */
    }
}
